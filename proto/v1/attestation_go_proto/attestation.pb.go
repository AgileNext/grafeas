// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/attestation.proto

package attestation_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common_go_proto "github.com/grafeas/grafeas/proto/v1/common_go_proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Note kind that represents a logical attestation "role" or "authority". For
// example, an organization might have one `Authority` for "QA" and one for
// "build". This note is intended to act strictly as a grouping mechanism for
// the attached occurrences (Attestations). This grouping mechanism also
// provides a security boundary, since IAM ACLs gate the ability for a principle
// to attach an occurrence to a given note. It also provides a single point of
// lookup to find all attached attestation occurrences, even if they don't all
// live in the same project.
type Authority struct {
	// Hint hints at the purpose of the attestation authority.
	Hint                 *Authority_Hint `protobuf:"bytes,1,opt,name=hint,proto3" json:"hint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Authority) Reset()         { *m = Authority{} }
func (m *Authority) String() string { return proto.CompactTextString(m) }
func (*Authority) ProtoMessage()    {}
func (*Authority) Descriptor() ([]byte, []int) {
	return fileDescriptor_665b62322cc527a8, []int{0}
}

func (m *Authority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Authority.Unmarshal(m, b)
}
func (m *Authority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Authority.Marshal(b, m, deterministic)
}
func (m *Authority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authority.Merge(m, src)
}
func (m *Authority) XXX_Size() int {
	return xxx_messageInfo_Authority.Size(m)
}
func (m *Authority) XXX_DiscardUnknown() {
	xxx_messageInfo_Authority.DiscardUnknown(m)
}

var xxx_messageInfo_Authority proto.InternalMessageInfo

func (m *Authority) GetHint() *Authority_Hint {
	if m != nil {
		return m.Hint
	}
	return nil
}

// This submessage provides human-readable hints about the purpose of the
// authority. Because the name of a note acts as its resource reference, it is
// important to disambiguate the canonical name of the Note (which might be a
// UUID for security purposes) from "readable" names more suitable for debug
// output. Note that these hints should not be used to look up authorities in
// security sensitive contexts, such as when looking up attestations to
// verify.
type Authority_Hint struct {
	// Required. The human readable name of this attestation authority, for
	// example "qa".
	HumanReadableName    string   `protobuf:"bytes,1,opt,name=human_readable_name,json=humanReadableName,proto3" json:"human_readable_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Authority_Hint) Reset()         { *m = Authority_Hint{} }
func (m *Authority_Hint) String() string { return proto.CompactTextString(m) }
func (*Authority_Hint) ProtoMessage()    {}
func (*Authority_Hint) Descriptor() ([]byte, []int) {
	return fileDescriptor_665b62322cc527a8, []int{0, 0}
}

func (m *Authority_Hint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Authority_Hint.Unmarshal(m, b)
}
func (m *Authority_Hint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Authority_Hint.Marshal(b, m, deterministic)
}
func (m *Authority_Hint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authority_Hint.Merge(m, src)
}
func (m *Authority_Hint) XXX_Size() int {
	return xxx_messageInfo_Authority_Hint.Size(m)
}
func (m *Authority_Hint) XXX_DiscardUnknown() {
	xxx_messageInfo_Authority_Hint.DiscardUnknown(m)
}

var xxx_messageInfo_Authority_Hint proto.InternalMessageInfo

func (m *Authority_Hint) GetHumanReadableName() string {
	if m != nil {
		return m.HumanReadableName
	}
	return ""
}

// Details of an attestation occurrence.
type Details struct {
	// Required. Attestation for the resource.
	Attestation          *Attestation `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Details) Reset()         { *m = Details{} }
func (m *Details) String() string { return proto.CompactTextString(m) }
func (*Details) ProtoMessage()    {}
func (*Details) Descriptor() ([]byte, []int) {
	return fileDescriptor_665b62322cc527a8, []int{1}
}

func (m *Details) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Details.Unmarshal(m, b)
}
func (m *Details) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Details.Marshal(b, m, deterministic)
}
func (m *Details) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Details.Merge(m, src)
}
func (m *Details) XXX_Size() int {
	return xxx_messageInfo_Details.Size(m)
}
func (m *Details) XXX_DiscardUnknown() {
	xxx_messageInfo_Details.DiscardUnknown(m)
}

var xxx_messageInfo_Details proto.InternalMessageInfo

func (m *Details) GetAttestation() *Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

// Occurrence that represents a single "attestation". The authenticity of an
// attestation can be verified using the attached signature. If the verifier
// trusts the public key of the signer, then verifying the signature is
// sufficient to establish trust. In this circumstance, the authority to which
// this attestation is attached is primarily useful for lookup (how to find
// this attestation if you already know the authority and artifact to be
// verified) and intent (for which authority this attestation was intended to
// sign.
type Attestation struct {
	// Required. The serialized payload that is verified by one or more `signatures`.
	SerializedPayload []byte `protobuf:"bytes,1,opt,name=serialized_payload,json=serializedPayload,proto3" json:"serialized_payload,omitempty"`
	// One or more signatures over `serialized_payload`.  Verifier implementations
	// should consider this attestation message verified if at least one
	// `signature` verifies `serialized_payload`.  See `Signature` in common.proto
	// for more details on signature structure and verification.
	Signatures           []*common_go_proto.Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Attestation) Reset()         { *m = Attestation{} }
func (m *Attestation) String() string { return proto.CompactTextString(m) }
func (*Attestation) ProtoMessage()    {}
func (*Attestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_665b62322cc527a8, []int{2}
}

func (m *Attestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attestation.Unmarshal(m, b)
}
func (m *Attestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attestation.Marshal(b, m, deterministic)
}
func (m *Attestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attestation.Merge(m, src)
}
func (m *Attestation) XXX_Size() int {
	return xxx_messageInfo_Attestation.Size(m)
}
func (m *Attestation) XXX_DiscardUnknown() {
	xxx_messageInfo_Attestation.DiscardUnknown(m)
}

var xxx_messageInfo_Attestation proto.InternalMessageInfo

func (m *Attestation) GetSerializedPayload() []byte {
	if m != nil {
		return m.SerializedPayload
	}
	return nil
}

func (m *Attestation) GetSignatures() []*common_go_proto.Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func init() {
	proto.RegisterType((*Authority)(nil), "grafeas.v1.attestation.Authority")
	proto.RegisterType((*Authority_Hint)(nil), "grafeas.v1.attestation.Authority.Hint")
	proto.RegisterType((*Details)(nil), "grafeas.v1.attestation.Details")
	proto.RegisterType((*Attestation)(nil), "grafeas.v1.attestation.Attestation")
}

func init() { proto.RegisterFile("proto/v1/attestation.proto", fileDescriptor_665b62322cc527a8) }

var fileDescriptor_665b62322cc527a8 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xe9, 0x1f, 0x94, 0xce, 0x7a, 0x69, 0xa4, 0x52, 0x7b, 0x2a, 0x15, 0xa4, 0x17, 0x53,
	0x5a, 0x51, 0xc4, 0x5b, 0x45, 0xd1, 0x93, 0x94, 0x78, 0x13, 0x64, 0x99, 0xb6, 0x71, 0x37, 0xb0,
	0x49, 0x4a, 0x32, 0x5b, 0xa8, 0x17, 0xbf, 0x8b, 0x9f, 0x54, 0x8c, 0xfd, 0x93, 0x43, 0x7b, 0x4a,
	0x66, 0x7e, 0xef, 0xbd, 0x3c, 0x08, 0x74, 0x16, 0xce, 0x92, 0x1d, 0x2c, 0x87, 0x03, 0x24, 0x92,
	0x9e, 0x90, 0x94, 0x35, 0x3c, 0x2c, 0xd9, 0x59, 0xe6, 0xf0, 0x53, 0xa2, 0xe7, 0xcb, 0x21, 0x8f,
	0x68, 0xa7, 0xb5, 0xf5, 0xcc, 0xac, 0xd6, 0x1b, 0x79, 0xef, 0x1b, 0x1a, 0xe3, 0x92, 0x72, 0xeb,
	0x14, 0xad, 0xd8, 0x3d, 0xd4, 0x73, 0x65, 0xa8, 0x5d, 0xe9, 0x56, 0xfa, 0xc9, 0xe8, 0x92, 0xef,
	0x8f, 0xe2, 0x5b, 0x03, 0x7f, 0x51, 0x86, 0x44, 0xf0, 0x74, 0x6e, 0xa1, 0xfe, 0x37, 0x31, 0x0e,
	0xa7, 0x79, 0xa9, 0xd1, 0xa4, 0x4e, 0xe2, 0x1c, 0xa7, 0x85, 0x4c, 0x0d, 0x6a, 0x19, 0x22, 0x1b,
	0xa2, 0x19, 0x90, 0x58, 0x93, 0x57, 0xd4, 0xb2, 0x37, 0x81, 0xe3, 0x47, 0x49, 0xa8, 0x0a, 0xcf,
	0x9e, 0x20, 0x89, 0x9e, 0x59, 0xb7, 0xb8, 0x38, 0xd8, 0x62, 0x77, 0x17, 0xb1, 0xaf, 0xe7, 0x21,
	0x89, 0x18, 0xbb, 0x02, 0xe6, 0xa5, 0x53, 0x58, 0xa8, 0x2f, 0x39, 0x4f, 0x17, 0xb8, 0x2a, 0x2c,
	0xce, 0x43, 0xf8, 0x89, 0x68, 0xee, 0xc8, 0xe4, 0x1f, 0xb0, 0x1b, 0x00, 0xaf, 0x32, 0x83, 0x54,
	0x3a, 0xe9, 0xdb, 0xd5, 0x6e, 0xad, 0x9f, 0x8c, 0x5a, 0x71, 0x87, 0xb7, 0x0d, 0x15, 0x91, 0xf0,
	0xe1, 0x03, 0xce, 0x95, 0x3d, 0x50, 0x75, 0x52, 0x79, 0xbf, 0xcb, 0x14, 0xe5, 0xe5, 0x94, 0xcf,
	0xac, 0x1e, 0xac, 0x45, 0xdb, 0x73, 0xdf, 0x67, 0xa6, 0x99, 0x4d, 0xc3, 0xfe, 0xa7, 0x5a, 0x7b,
	0x16, 0xe3, 0xe9, 0x51, 0x18, 0xae, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x88, 0x10, 0x7c,
	0xfa, 0x01, 0x00, 0x00,
}
