// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/vulnerability.proto

package vulnerability_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common_go_proto "github.com/grafeas/grafeas/proto/v1/common_go_proto"
	cvss_go_proto "github.com/grafeas/grafeas/proto/v1/cvss_go_proto"
	package_go_proto "github.com/grafeas/grafeas/proto/v1/package_go_proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DO NOT USE: UNDER HEAVY DEVELOPMENT.
// TODO(aysylu): finalize this.
//
// Note provider-assigned severity/impact ranking.
type Severity int32

const (
	// Unknown.
	Severity_SEVERITY_UNSPECIFIED Severity = 0
	// Minimal severity.
	Severity_MINIMAL Severity = 1
	// Low severity.
	Severity_LOW Severity = 2
	// Medium severity.
	Severity_MEDIUM Severity = 3
	// High severity.
	Severity_HIGH Severity = 4
	// Critical severity.
	Severity_CRITICAL Severity = 5
)

var Severity_name = map[int32]string{
	0: "SEVERITY_UNSPECIFIED",
	1: "MINIMAL",
	2: "LOW",
	3: "MEDIUM",
	4: "HIGH",
	5: "CRITICAL",
}

var Severity_value = map[string]int32{
	"SEVERITY_UNSPECIFIED": 0,
	"MINIMAL":              1,
	"LOW":                  2,
	"MEDIUM":               3,
	"HIGH":                 4,
	"CRITICAL":             5,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{0}
}

// Vulnerability provides metadata about a security vulnerability in a Note.
type Vulnerability struct {
	// The CVSS score for this vulnerability.
	CvssScore float32 `protobuf:"fixed32,1,opt,name=cvss_score,json=cvssScore,proto3" json:"cvss_score,omitempty"`
	// Note provider assigned impact of the vulnerability.
	Severity Severity `protobuf:"varint,2,opt,name=severity,proto3,enum=grafeas.v1.vulnerability.Severity" json:"severity,omitempty"`
	// All information about the package to specifically identify this
	// vulnerability. One entry per (version range and cpe_uri) the package
	// vulnerability has manifested in.
	Details []*Vulnerability_Detail `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	// The full description of the CVSSv3.
	CvssV3 *cvss_go_proto.CVSSv3 `protobuf:"bytes,4,opt,name=cvss_v3,json=cvssV3,proto3" json:"cvss_v3,omitempty"`
	// Windows details get their own format because the information format and
	// model don't match a normal detail. Specifically Windows updates are done as
	// patches, thus Windows vulnerabilities really are a missing package, rather
	// than a package being at an incorrect version.
	WindowsDetails       []*Vulnerability_WindowsDetail `protobuf:"bytes,5,rep,name=windows_details,json=windowsDetails,proto3" json:"windows_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Vulnerability) Reset()         { *m = Vulnerability{} }
func (m *Vulnerability) String() string { return proto.CompactTextString(m) }
func (*Vulnerability) ProtoMessage()    {}
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{0}
}

func (m *Vulnerability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vulnerability.Unmarshal(m, b)
}
func (m *Vulnerability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vulnerability.Marshal(b, m, deterministic)
}
func (m *Vulnerability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vulnerability.Merge(m, src)
}
func (m *Vulnerability) XXX_Size() int {
	return xxx_messageInfo_Vulnerability.Size(m)
}
func (m *Vulnerability) XXX_DiscardUnknown() {
	xxx_messageInfo_Vulnerability.DiscardUnknown(m)
}

var xxx_messageInfo_Vulnerability proto.InternalMessageInfo

func (m *Vulnerability) GetCvssScore() float32 {
	if m != nil {
		return m.CvssScore
	}
	return 0
}

func (m *Vulnerability) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (m *Vulnerability) GetDetails() []*Vulnerability_Detail {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Vulnerability) GetCvssV3() *cvss_go_proto.CVSSv3 {
	if m != nil {
		return m.CvssV3
	}
	return nil
}

func (m *Vulnerability) GetWindowsDetails() []*Vulnerability_WindowsDetail {
	if m != nil {
		return m.WindowsDetails
	}
	return nil
}

// Identifies all appearances of this vulnerability in the package for a
// specific distro/location. For example: glibc in
// cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type Vulnerability_Detail struct {
	// Required. The CPE URI in
	// [cpe format](https://cpe.mitre.org/specification/) in which the
	// vulnerability manifests. Examples include distro or storage location for
	// vulnerable jar.
	CpeUri string `protobuf:"bytes,1,opt,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// Required. The name of the package where the vulnerability was found.
	Package string `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion *package_go_proto.Version `protobuf:"bytes,3,opt,name=min_affected_version,json=minAffectedVersion,proto3" json:"min_affected_version,omitempty"`
	// The max version of the package in which the vulnerability exists.
	MaxAffectedVersion *package_go_proto.Version `protobuf:"bytes,4,opt,name=max_affected_version,json=maxAffectedVersion,proto3" json:"max_affected_version,omitempty"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName string `protobuf:"bytes,5,opt,name=severity_name,json=severityName,proto3" json:"severity_name,omitempty"`
	// A vendor-specific description of this note.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The fix for this specific package version.
	FixedLocation *VulnerabilityLocation `protobuf:"bytes,7,opt,name=fixed_location,json=fixedLocation,proto3" json:"fixed_location,omitempty"`
	// The type of package; whether native or non native(ruby gems, node.js
	// packages etc).
	PackageType string `protobuf:"bytes,8,opt,name=package_type,json=packageType,proto3" json:"package_type,omitempty"`
	// Whether this detail is obsolete. Occurrences are expected not to point to
	// obsolete details.
	IsObsolete           bool     `protobuf:"varint,9,opt,name=is_obsolete,json=isObsolete,proto3" json:"is_obsolete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vulnerability_Detail) Reset()         { *m = Vulnerability_Detail{} }
func (m *Vulnerability_Detail) String() string { return proto.CompactTextString(m) }
func (*Vulnerability_Detail) ProtoMessage()    {}
func (*Vulnerability_Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{0, 0}
}

func (m *Vulnerability_Detail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vulnerability_Detail.Unmarshal(m, b)
}
func (m *Vulnerability_Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vulnerability_Detail.Marshal(b, m, deterministic)
}
func (m *Vulnerability_Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vulnerability_Detail.Merge(m, src)
}
func (m *Vulnerability_Detail) XXX_Size() int {
	return xxx_messageInfo_Vulnerability_Detail.Size(m)
}
func (m *Vulnerability_Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_Vulnerability_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_Vulnerability_Detail proto.InternalMessageInfo

func (m *Vulnerability_Detail) GetCpeUri() string {
	if m != nil {
		return m.CpeUri
	}
	return ""
}

func (m *Vulnerability_Detail) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *Vulnerability_Detail) GetMinAffectedVersion() *package_go_proto.Version {
	if m != nil {
		return m.MinAffectedVersion
	}
	return nil
}

func (m *Vulnerability_Detail) GetMaxAffectedVersion() *package_go_proto.Version {
	if m != nil {
		return m.MaxAffectedVersion
	}
	return nil
}

func (m *Vulnerability_Detail) GetSeverityName() string {
	if m != nil {
		return m.SeverityName
	}
	return ""
}

func (m *Vulnerability_Detail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Vulnerability_Detail) GetFixedLocation() *VulnerabilityLocation {
	if m != nil {
		return m.FixedLocation
	}
	return nil
}

func (m *Vulnerability_Detail) GetPackageType() string {
	if m != nil {
		return m.PackageType
	}
	return ""
}

func (m *Vulnerability_Detail) GetIsObsolete() bool {
	if m != nil {
		return m.IsObsolete
	}
	return false
}

type Vulnerability_WindowsDetail struct {
	// Required. The CPE URI in
	// [cpe format](https://cpe.mitre.org/specification/) in which the
	// vulnerability manifests. Examples include distro or storage location for
	// vulnerable jar.
	CpeUri string `protobuf:"bytes,1,opt,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// Required. The name of the vulnerability.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the vulnerability.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The names of the KBs which have hotfixes to mitigate this
	// vulnerability. Note that there may be multiple hotfixes (and thus
	// multiple KBs) that mitigate a given vulnerability. Currently any listed
	// kb's presence is considered a fix.
	FixingKbs            []*Vulnerability_WindowsDetail_KnowledgeBase `protobuf:"bytes,4,rep,name=fixing_kbs,json=fixingKbs,proto3" json:"fixing_kbs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *Vulnerability_WindowsDetail) Reset()         { *m = Vulnerability_WindowsDetail{} }
func (m *Vulnerability_WindowsDetail) String() string { return proto.CompactTextString(m) }
func (*Vulnerability_WindowsDetail) ProtoMessage()    {}
func (*Vulnerability_WindowsDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{0, 1}
}

func (m *Vulnerability_WindowsDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vulnerability_WindowsDetail.Unmarshal(m, b)
}
func (m *Vulnerability_WindowsDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vulnerability_WindowsDetail.Marshal(b, m, deterministic)
}
func (m *Vulnerability_WindowsDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vulnerability_WindowsDetail.Merge(m, src)
}
func (m *Vulnerability_WindowsDetail) XXX_Size() int {
	return xxx_messageInfo_Vulnerability_WindowsDetail.Size(m)
}
func (m *Vulnerability_WindowsDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_Vulnerability_WindowsDetail.DiscardUnknown(m)
}

var xxx_messageInfo_Vulnerability_WindowsDetail proto.InternalMessageInfo

func (m *Vulnerability_WindowsDetail) GetCpeUri() string {
	if m != nil {
		return m.CpeUri
	}
	return ""
}

func (m *Vulnerability_WindowsDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vulnerability_WindowsDetail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Vulnerability_WindowsDetail) GetFixingKbs() []*Vulnerability_WindowsDetail_KnowledgeBase {
	if m != nil {
		return m.FixingKbs
	}
	return nil
}

type Vulnerability_WindowsDetail_KnowledgeBase struct {
	// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A link to the KB in the Windows update catalog -
	// https://www.catalog.update.microsoft.com/
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vulnerability_WindowsDetail_KnowledgeBase) Reset() {
	*m = Vulnerability_WindowsDetail_KnowledgeBase{}
}
func (m *Vulnerability_WindowsDetail_KnowledgeBase) String() string { return proto.CompactTextString(m) }
func (*Vulnerability_WindowsDetail_KnowledgeBase) ProtoMessage()    {}
func (*Vulnerability_WindowsDetail_KnowledgeBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{0, 1, 0}
}

func (m *Vulnerability_WindowsDetail_KnowledgeBase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vulnerability_WindowsDetail_KnowledgeBase.Unmarshal(m, b)
}
func (m *Vulnerability_WindowsDetail_KnowledgeBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vulnerability_WindowsDetail_KnowledgeBase.Marshal(b, m, deterministic)
}
func (m *Vulnerability_WindowsDetail_KnowledgeBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vulnerability_WindowsDetail_KnowledgeBase.Merge(m, src)
}
func (m *Vulnerability_WindowsDetail_KnowledgeBase) XXX_Size() int {
	return xxx_messageInfo_Vulnerability_WindowsDetail_KnowledgeBase.Size(m)
}
func (m *Vulnerability_WindowsDetail_KnowledgeBase) XXX_DiscardUnknown() {
	xxx_messageInfo_Vulnerability_WindowsDetail_KnowledgeBase.DiscardUnknown(m)
}

var xxx_messageInfo_Vulnerability_WindowsDetail_KnowledgeBase proto.InternalMessageInfo

func (m *Vulnerability_WindowsDetail_KnowledgeBase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vulnerability_WindowsDetail_KnowledgeBase) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Details of a vulnerability Occurrence.
type Details struct {
	// The type of package; whether native or non native(ruby gems, node.js
	// packages etc)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Output only. The note provider assigned Severity of the vulnerability.
	Severity Severity `protobuf:"varint,2,opt,name=severity,proto3,enum=grafeas.v1.vulnerability.Severity" json:"severity,omitempty"`
	// Output only. The CVSS score of this vulnerability. CVSS score is on a
	// scale of 0-10 where 0 indicates low severity and 10 indicates high
	// severity.
	CvssScore float32 `protobuf:"fixed32,3,opt,name=cvss_score,json=cvssScore,proto3" json:"cvss_score,omitempty"`
	// Required. The set of affected locations and their fixes (if available)
	// within the associated resource.
	PackageIssue []*PackageIssue `protobuf:"bytes,4,rep,name=package_issue,json=packageIssue,proto3" json:"package_issue,omitempty"`
	// Output only. A one sentence description of this vulnerability.
	ShortDescription string `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// Output only. A detailed description of this vulnerability.
	LongDescription string `protobuf:"bytes,6,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	// Output only. URLs related to this vulnerability.
	RelatedUrls []*common_go_proto.RelatedUrl `protobuf:"bytes,7,rep,name=related_urls,json=relatedUrls,proto3" json:"related_urls,omitempty"`
	// The distro assigned severity for this vulnerability when it is
	// available, and note provider assigned severity when distro has not yet
	// assigned a severity for this vulnerability.
	EffectiveSeverity Severity `protobuf:"varint,8,opt,name=effective_severity,json=effectiveSeverity,proto3,enum=grafeas.v1.vulnerability.Severity" json:"effective_severity,omitempty"`
	// Output only. True if at least one of the affected packages
	// has a fix available.
	FixAvailable         bool     `protobuf:"varint,9,opt,name=fix_available,json=fixAvailable,proto3" json:"fix_available,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Details) Reset()         { *m = Details{} }
func (m *Details) String() string { return proto.CompactTextString(m) }
func (*Details) ProtoMessage()    {}
func (*Details) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{1}
}

func (m *Details) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Details.Unmarshal(m, b)
}
func (m *Details) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Details.Marshal(b, m, deterministic)
}
func (m *Details) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Details.Merge(m, src)
}
func (m *Details) XXX_Size() int {
	return xxx_messageInfo_Details.Size(m)
}
func (m *Details) XXX_DiscardUnknown() {
	xxx_messageInfo_Details.DiscardUnknown(m)
}

var xxx_messageInfo_Details proto.InternalMessageInfo

func (m *Details) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Details) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (m *Details) GetCvssScore() float32 {
	if m != nil {
		return m.CvssScore
	}
	return 0
}

func (m *Details) GetPackageIssue() []*PackageIssue {
	if m != nil {
		return m.PackageIssue
	}
	return nil
}

func (m *Details) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Details) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *Details) GetRelatedUrls() []*common_go_proto.RelatedUrl {
	if m != nil {
		return m.RelatedUrls
	}
	return nil
}

func (m *Details) GetEffectiveSeverity() Severity {
	if m != nil {
		return m.EffectiveSeverity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (m *Details) GetFixAvailable() bool {
	if m != nil {
		return m.FixAvailable
	}
	return false
}

// This message wraps a package, version and cpe_uri affected by a vulnerability
// and its associated fix (if one is available).
type PackageIssue struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/)
	// format. Examples include distro or storage location for vulnerable jar.
	AffectedCpeUri string `protobuf:"bytes,1,opt,name=affected_cpe_uri,json=affectedCpeUri,proto3" json:"affected_cpe_uri,omitempty"`
	// Required. The package being described.
	AffectedPackage string `protobuf:"bytes,2,opt,name=affected_package,json=affectedPackage,proto3" json:"affected_package,omitempty"`
	// Required. The affected version of the vulnerability.
	AffectedVersion *package_go_proto.Version `protobuf:"bytes,3,opt,name=affected_version,json=affectedVersion,proto3" json:"affected_version,omitempty"`
	// The CPE URI in [cpe format](https://cpe.mitre.org/specification/)
	// format. Examples include distro or storage location for vulnerable jar.
	FixedCpeUri string `protobuf:"bytes,4,opt,name=fixed_cpe_uri,json=fixedCpeUri,proto3" json:"fixed_cpe_uri,omitempty"`
	// The package in which fix is available.
	FixedPackage string `protobuf:"bytes,5,opt,name=fixed_package,json=fixedPackage,proto3" json:"fixed_package,omitempty"`
	// Required. The fixed version of the vulnerability. Setting this to
	// Version.MAXIMUM implies no fix is available.
	FixedVersion *package_go_proto.Version `protobuf:"bytes,6,opt,name=fixed_version,json=fixedVersion,proto3" json:"fixed_version,omitempty"`
	// Required. True if at a fix is available for this package.
	FixAvailable         bool     `protobuf:"varint,7,opt,name=fix_available,json=fixAvailable,proto3" json:"fix_available,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageIssue) Reset()         { *m = PackageIssue{} }
func (m *PackageIssue) String() string { return proto.CompactTextString(m) }
func (*PackageIssue) ProtoMessage()    {}
func (*PackageIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{2}
}

func (m *PackageIssue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageIssue.Unmarshal(m, b)
}
func (m *PackageIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageIssue.Marshal(b, m, deterministic)
}
func (m *PackageIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageIssue.Merge(m, src)
}
func (m *PackageIssue) XXX_Size() int {
	return xxx_messageInfo_PackageIssue.Size(m)
}
func (m *PackageIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageIssue.DiscardUnknown(m)
}

var xxx_messageInfo_PackageIssue proto.InternalMessageInfo

func (m *PackageIssue) GetAffectedCpeUri() string {
	if m != nil {
		return m.AffectedCpeUri
	}
	return ""
}

func (m *PackageIssue) GetAffectedPackage() string {
	if m != nil {
		return m.AffectedPackage
	}
	return ""
}

func (m *PackageIssue) GetAffectedVersion() *package_go_proto.Version {
	if m != nil {
		return m.AffectedVersion
	}
	return nil
}

func (m *PackageIssue) GetFixedCpeUri() string {
	if m != nil {
		return m.FixedCpeUri
	}
	return ""
}

func (m *PackageIssue) GetFixedPackage() string {
	if m != nil {
		return m.FixedPackage
	}
	return ""
}

func (m *PackageIssue) GetFixedVersion() *package_go_proto.Version {
	if m != nil {
		return m.FixedVersion
	}
	return nil
}

func (m *PackageIssue) GetFixAvailable() bool {
	if m != nil {
		return m.FixAvailable
	}
	return false
}

// The location of the vulnerability.
type VulnerabilityLocation struct {
	// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/)
	// format. Examples include distro or storage location for vulnerable jar.
	CpeUri string `protobuf:"bytes,1,opt,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// Required. The package being described.
	Package string `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	// Required. The version of the package being described.
	Version              *package_go_proto.Version `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *VulnerabilityLocation) Reset()         { *m = VulnerabilityLocation{} }
func (m *VulnerabilityLocation) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityLocation) ProtoMessage()    {}
func (*VulnerabilityLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a38ea079140d62c, []int{3}
}

func (m *VulnerabilityLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityLocation.Unmarshal(m, b)
}
func (m *VulnerabilityLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityLocation.Marshal(b, m, deterministic)
}
func (m *VulnerabilityLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityLocation.Merge(m, src)
}
func (m *VulnerabilityLocation) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityLocation.Size(m)
}
func (m *VulnerabilityLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityLocation.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityLocation proto.InternalMessageInfo

func (m *VulnerabilityLocation) GetCpeUri() string {
	if m != nil {
		return m.CpeUri
	}
	return ""
}

func (m *VulnerabilityLocation) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *VulnerabilityLocation) GetVersion() *package_go_proto.Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func init() {
	proto.RegisterEnum("grafeas.v1.vulnerability.Severity", Severity_name, Severity_value)
	proto.RegisterType((*Vulnerability)(nil), "grafeas.v1.vulnerability.Vulnerability")
	proto.RegisterType((*Vulnerability_Detail)(nil), "grafeas.v1.vulnerability.Vulnerability.Detail")
	proto.RegisterType((*Vulnerability_WindowsDetail)(nil), "grafeas.v1.vulnerability.Vulnerability.WindowsDetail")
	proto.RegisterType((*Vulnerability_WindowsDetail_KnowledgeBase)(nil), "grafeas.v1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase")
	proto.RegisterType((*Details)(nil), "grafeas.v1.vulnerability.Details")
	proto.RegisterType((*PackageIssue)(nil), "grafeas.v1.vulnerability.PackageIssue")
	proto.RegisterType((*VulnerabilityLocation)(nil), "grafeas.v1.vulnerability.VulnerabilityLocation")
}

func init() { proto.RegisterFile("proto/v1/vulnerability.proto", fileDescriptor_9a38ea079140d62c) }

var fileDescriptor_9a38ea079140d62c = []byte{
	// 902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xd1, 0x6e, 0xdb, 0x36,
	0x14, 0x9d, 0x2c, 0xc7, 0xb2, 0xaf, 0xed, 0x44, 0xe5, 0xda, 0x4e, 0x70, 0x37, 0xcc, 0x73, 0x81,
	0xc1, 0xdd, 0x00, 0x07, 0x4d, 0x90, 0x87, 0xee, 0x61, 0x98, 0xeb, 0xb8, 0x8d, 0x90, 0x38, 0xcd,
	0xe4, 0xc4, 0xc5, 0xf6, 0x50, 0x82, 0x96, 0x69, 0x97, 0xa8, 0x2c, 0x19, 0xa2, 0xac, 0x38, 0x8f,
	0xfb, 0x81, 0x7d, 0xc4, 0xbe, 0x63, 0x9f, 0xb1, 0xb7, 0x7d, 0xc9, 0xde, 0x06, 0x51, 0xa4, 0x26,
	0x27, 0x31, 0x96, 0xa6, 0x4f, 0x26, 0x0f, 0xcf, 0xb9, 0x3a, 0xbc, 0xf7, 0xf2, 0xc2, 0xf0, 0xe5,
	0x22, 0x0c, 0xa2, 0x60, 0x37, 0x7e, 0xbe, 0x1b, 0x2f, 0x3d, 0x9f, 0x86, 0x64, 0xcc, 0x3c, 0x16,
	0x5d, 0x75, 0x04, 0x8c, 0xac, 0x59, 0x48, 0xa6, 0x94, 0xf0, 0x4e, 0xfc, 0xbc, 0xb3, 0x76, 0xde,
	0x78, 0x94, 0xe9, 0xdc, 0x60, 0x3e, 0x0f, 0xfc, 0x54, 0xd0, 0xf8, 0xfc, 0x3f, 0x38, 0xe6, 0x5c,
	0x82, 0x8f, 0x33, 0x70, 0x41, 0xdc, 0x0f, 0x64, 0x46, 0x53, 0xbc, 0xf5, 0x7b, 0x19, 0xea, 0xa3,
	0x7c, 0x54, 0xf4, 0x15, 0x40, 0xa2, 0xc3, 0xdc, 0x0d, 0x42, 0x6a, 0x69, 0x4d, 0xad, 0x5d, 0x70,
	0x2a, 0x09, 0x32, 0x4c, 0x00, 0xf4, 0x23, 0x94, 0x39, 0x8d, 0x69, 0xc8, 0xa2, 0x2b, 0xab, 0xd0,
	0xd4, 0xda, 0xdb, 0x7b, 0xad, 0xce, 0x26, 0x87, 0x9d, 0xa1, 0x64, 0x3a, 0x99, 0x06, 0x1d, 0x81,
	0x31, 0xa1, 0x11, 0x61, 0x1e, 0xb7, 0xf4, 0xa6, 0xde, 0xae, 0xee, 0x75, 0x36, 0xcb, 0xd7, 0x8c,
	0x75, 0x0e, 0x85, 0xcc, 0x51, 0x72, 0xf4, 0x02, 0x0c, 0x61, 0x34, 0xde, 0xb7, 0x8a, 0x4d, 0xad,
	0x5d, 0xdd, 0x6b, 0x6e, 0x8e, 0xd4, 0x1b, 0x0d, 0x87, 0xf1, 0xbe, 0x53, 0x4a, 0x04, 0xa3, 0x7d,
	0xf4, 0x0e, 0x76, 0x2e, 0x99, 0x3f, 0x09, 0x2e, 0x39, 0x56, 0x66, 0xb6, 0x84, 0x99, 0x83, 0xbb,
	0x9a, 0x79, 0x9b, 0xca, 0xa5, 0xa7, 0xed, 0xcb, 0xfc, 0x96, 0x37, 0xfe, 0xd4, 0xa1, 0x94, 0xae,
	0xd1, 0x17, 0x60, 0xb8, 0x0b, 0x8a, 0x97, 0x21, 0x13, 0xb9, 0xac, 0x38, 0x25, 0x77, 0x41, 0x2f,
	0x42, 0x86, 0x2c, 0x30, 0x64, 0x29, 0x44, 0x1e, 0x2b, 0x8e, 0xda, 0xa2, 0x01, 0x3c, 0x9c, 0x33,
	0x1f, 0x93, 0xe9, 0x94, 0xba, 0x11, 0x9d, 0xe0, 0x98, 0x86, 0x9c, 0x05, 0xbe, 0xa5, 0x8b, 0x5b,
	0x3e, 0xc9, 0x5b, 0x54, 0xc5, 0x1c, 0xa5, 0x14, 0x07, 0xcd, 0x99, 0xdf, 0x95, 0x3a, 0x89, 0x89,
	0x70, 0x64, 0x75, 0x33, 0x5c, 0xf1, 0x2e, 0xe1, 0xc8, 0xea, 0x7a, 0xb8, 0xa7, 0x50, 0x57, 0xc5,
	0xc4, 0x3e, 0x99, 0x53, 0x6b, 0x4b, 0xb8, 0xaf, 0x29, 0xf0, 0x94, 0xcc, 0x29, 0x6a, 0x42, 0x75,
	0x42, 0xb9, 0x1b, 0xb2, 0x45, 0x94, 0x7c, 0xaa, 0x24, 0x28, 0x79, 0x08, 0x8d, 0x60, 0x7b, 0xca,
	0x56, 0x74, 0x82, 0xbd, 0xc0, 0x25, 0x82, 0x64, 0x08, 0x3f, 0xbb, 0x77, 0xac, 0xc0, 0x89, 0x94,
	0x39, 0x75, 0x11, 0x46, 0x6d, 0xd1, 0x37, 0x50, 0x93, 0xb7, 0xc0, 0xd1, 0xd5, 0x82, 0x5a, 0xe5,
	0xf4, 0xd3, 0x12, 0x3b, 0xbf, 0x5a, 0x50, 0xf4, 0x35, 0x54, 0x19, 0xc7, 0xc1, 0x98, 0x07, 0x1e,
	0x8d, 0xa8, 0x55, 0x69, 0x6a, 0xed, 0xb2, 0x03, 0x8c, 0xbf, 0x91, 0x48, 0xe3, 0x1f, 0x0d, 0xea,
	0x6b, 0x05, 0xde, 0x5c, 0x45, 0x04, 0x45, 0x91, 0x84, 0xb4, 0x84, 0x62, 0x7d, 0xfd, 0xf2, 0xfa,
	0xcd, 0xcb, 0x8f, 0x01, 0xa6, 0x6c, 0xc5, 0xfc, 0x19, 0xfe, 0x30, 0xe6, 0x56, 0x51, 0xb4, 0x5e,
	0xef, 0x5e, 0xad, 0xd7, 0x39, 0xf6, 0x83, 0x4b, 0x8f, 0x4e, 0x66, 0xf4, 0x25, 0xe1, 0xd4, 0xa9,
	0xa4, 0x61, 0x8f, 0xc7, 0xbc, 0x71, 0x00, 0xf5, 0xb5, 0xb3, 0xcc, 0xaa, 0x96, 0xb3, 0x6a, 0x82,
	0xbe, 0x0c, 0x3d, 0xe9, 0x3e, 0x59, 0xb6, 0xfe, 0xd2, 0xc1, 0x90, 0x6d, 0x9c, 0x28, 0x44, 0x0e,
	0xa5, 0x22, 0x59, 0x7f, 0xf2, 0xfb, 0x5f, 0x1f, 0x2f, 0xfa, 0xf5, 0xf1, 0x72, 0x0c, 0x75, 0x55,
	0x3e, 0xc6, 0xf9, 0x92, 0xca, 0xe4, 0x7c, 0xbb, 0xf9, 0x1b, 0x67, 0x29, 0xdd, 0x4e, 0xd8, 0x8e,
	0xaa, 0xbd, 0xd8, 0xa1, 0xef, 0xe1, 0x01, 0x7f, 0x1f, 0x84, 0x11, 0xce, 0x97, 0x23, 0x6d, 0x57,
	0x53, 0x1c, 0x1c, 0xe6, 0x6a, 0xf2, 0x0c, 0x4c, 0x2f, 0xf0, 0x67, 0xf8, 0x66, 0xdf, 0xee, 0x24,
	0x78, 0x9e, 0xfa, 0x02, 0x6a, 0x21, 0xf5, 0x48, 0xf2, 0x98, 0x96, 0xa1, 0xc7, 0x2d, 0x43, 0x78,
	0x7c, 0x9c, 0xf7, 0xe8, 0xa4, 0xe7, 0x17, 0xa1, 0xe7, 0x54, 0xc3, 0x6c, 0xcd, 0xd1, 0xcf, 0x80,
	0xa8, 0x78, 0x50, 0x2c, 0xa6, 0x38, 0x4b, 0x64, 0xf9, 0xce, 0x89, 0x7c, 0x90, 0xa9, 0x15, 0x94,
	0x3c, 0xc8, 0x29, 0x5b, 0x61, 0x12, 0x13, 0xe6, 0x91, 0xb1, 0xa7, 0x1a, 0xba, 0x36, 0x65, 0xab,
	0xae, 0xc2, 0x5a, 0x7f, 0x17, 0xa0, 0x96, 0xcf, 0x14, 0x6a, 0x83, 0x99, 0x4d, 0x84, 0xf5, 0xd6,
	0xde, 0x56, 0x78, 0x2f, 0x6d, 0xf1, 0x67, 0x39, 0xe6, 0xfa, 0xc4, 0xda, 0x51, 0xb8, 0x8c, 0x8c,
	0x5e, 0xe5, 0xa8, 0x1f, 0x31, 0xb5, 0xb2, 0x38, 0x6a, 0xc6, 0xb4, 0x20, 0x7d, 0xd5, 0x99, 0xb3,
	0x62, 0xfa, 0x86, 0x04, 0x28, 0x6d, 0x3d, 0x55, 0x1c, 0xe5, 0x49, 0xce, 0x21, 0x01, 0x2a, 0x43,
	0x3f, 0x29, 0x92, 0x72, 0x53, 0xfa, 0x7f, 0x37, 0x69, 0x84, 0xdc, 0xb8, 0x5b, 0xcf, 0xae, 0x71,
	0x4b, 0x76, 0x7f, 0xd3, 0xe0, 0xd1, 0xad, 0xd3, 0xe9, 0x3e, 0xe3, 0xff, 0x00, 0x8c, 0x8f, 0xc8,
	0x9d, 0xe2, 0x7e, 0xf7, 0x0e, 0xca, 0x59, 0x4b, 0x58, 0xf0, 0x70, 0xd8, 0x1f, 0xf5, 0x1d, 0xfb,
	0xfc, 0x17, 0x7c, 0x71, 0x3a, 0x3c, 0xeb, 0xf7, 0xec, 0x57, 0x76, 0xff, 0xd0, 0xfc, 0x0c, 0x55,
	0xc1, 0x18, 0xd8, 0xa7, 0xf6, 0xa0, 0x7b, 0x62, 0x6a, 0xc8, 0x00, 0xfd, 0xe4, 0xcd, 0x5b, 0xb3,
	0x80, 0x00, 0x4a, 0x83, 0xfe, 0xa1, 0x7d, 0x31, 0x30, 0x75, 0x54, 0x86, 0xe2, 0x91, 0xfd, 0xfa,
	0xc8, 0x2c, 0xa2, 0x1a, 0x94, 0x7b, 0x8e, 0x7d, 0x6e, 0xf7, 0xba, 0x27, 0xe6, 0xd6, 0x4b, 0x02,
	0x4f, 0x58, 0xb0, 0xb1, 0x43, 0xcf, 0xb4, 0x5f, 0x7f, 0x98, 0xb1, 0xe8, 0xfd, 0x72, 0xdc, 0x71,
	0x83, 0xf9, 0xae, 0xa4, 0x65, 0xbf, 0xb7, 0xff, 0xc3, 0xc1, 0xb3, 0x00, 0x8b, 0x93, 0x3f, 0x0a,
	0xfa, 0x6b, 0xa7, 0x3b, 0x2e, 0x89, 0xcd, 0xfe, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xdb,
	0x51, 0x11, 0x11, 0x09, 0x00, 0x00,
}
